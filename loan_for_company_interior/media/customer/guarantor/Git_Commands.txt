Git Commands :-
	Git commands are used to work with local repositories


	git init 
			The Command git init is used to create an empty git repository.
			After git init command is used, a .git folder is created in the directory with some subdirectories.
			Once the repository is initialized the process of creating other files begins.
		Command:
			$ git init
			this command will create current directory as git repository.

			$ git init <argument>
			argument can be any name you want to give for git repository. when you pass argument with git init 
			command it will create a directory named as argument given and will be used as git repository.


	git add
			Add command is used after checking the status of the files, to add those files to the staging area.
			Before running the commit command, "git add" is used to add any new or modified files.
		Command:
			git add .
		
		There are several options with add command like * for all the files in the directory to add specific files 
		in staging area use the file name to add it 
		git add filename1 filename2


	git commit
			The commit command makes sure that the changes are saved to the local repository.
			The command "git commit –m <message>" allows you to describe everyone and help them understand what 
		has happened.
		Command:
			git commit -m "<message>"

	
	git status
			The git status command tells the current state of the repository.
			The command provides the current working branch. If the files are in the staging area, but not committed,
			it will be shown by the git status. Also, if there are no changes, it will show the message no changes to
			commit, working directory clean.
		Command:
			git status

	
	git config
			The git config command is used initially to configure the user.name and user.email. This specifies what 
			email id and username will be used from a local repository.
			When git config is used with --global flag, it writes the settings to all repositories on the computer.
		command:
			git config --global user.name "any username"
			git config --global user.email "<email id>"
		Note :- The email id should be the one which is used at the time of git account creation.


	git branch
			The git branch command is used to determine what branch the local repository is on.
			The command enables adding and deleting a branch.
		Command:
			git branch 
			this command will show you the current branch you working on.

			git branch <branch_name>
			this command is used to create new branch.

			git branch -a
			to list all remote or local branches.

			git branch -d <branch_name>
			to delete the branch.


	git checkout
			The git checkout command is used to switch branches, whenever the work is to be started on a different
			branch.
			The command works on three separate entities: files, commits, and branches.
			To checkout an existing branch
		Command:
			git checkout <branch_name>

			to checkout and create a new branch with that name
		Command:
			git checkout -b <new_branch>


	git merge
			The git merge command is used to integrate the branches together. The command combines the changes from 
			one branch to another branch.
			It is used to merge the changes in the staging branch to the stable branch.
		Command:
			git merge <branch_name>
	
	Git Commands to work with Remote Repositories


	git remote
			The git remote command is used to create, view, and delete connections to other repositories.
			The connections here are not like direct links into other repositories, but as bookmarks that serve as 
			convenient names to be used as a reference.

			To List the remote connections you have to other repositories.
		Command:
			git remote

			Same as the above command, but include the URL of each connection.
		Command:
			git remote -v

			To create a new connection to a remote repository.
		Command:
			git remote add <name> <url>

			Remove the connection to the remote repository called ＜name＞.
		Command:
			git remote rm <name>

			Rename a remote connection from ＜old-name＞ to ＜new-name＞.
		Command:
			git remote rename <old-name> <new-name>

		
	git clone
			The git clone command is used to create a local working copy of an existing remote repository.
			The command downloads the remote repository to the computer. It is equivalent to the Git init 
			command when working with a remote repository.
		Command:
			git clone <remote_url>


	git pull 
			The git pull command is used to fetch and merge changes from the remote repository to the local 
			repository.
			The command "git pull origin master" copies all the files from the master branch of the remote 
			repository to the local repository.
		Command:
			git pull <branch_name> <remote_url>
		
			git pull is an easy way to synchronize your local repository with upstream changes.


	git push
			The command git push is used to transfer the commits or pushing the content from the local repository 
			to the remote repository.
			The command is used after a local repository has been modified, and the modifications are to be shared 
			with the remote team members.
		Command:
			git push -u origin master

			Whenever you want to forcefully push the changes of local repository to remote repo then use the command
		Command:
			git push <remote> --force

			To push all of your local branches to the specified remote.
		Command:
			git push <remote> --all

	git fetch
			git fetch command is used to copy the remote repository to local repository. It fetches all the content
			from remote repository to local repository.
			To Fetch all the branches from the remote repository.
		Command:
			git fetch <remote>

			To fetch the content of specific branch.
		Command:
			gir fetch <remote> <branch>

			To fetch the contents from all the registered remotes and their branches.
		Command:
			git fetch --all

	
	Some advanced git commands:

	
	git stash
			The git stash command takes your modified tracked files and saves it on a pile of incomplete changes that 
			you can reapply at any time. To go back to work, you can use the stash pop.
			The git stash command will help a developer switch branches to work on something else without committing 
			to incomplete work.
		Command:
			To Store current work with untracked files
			git stash -u
		
			To bring stashed work back to working directory
			git stash pop

	
	git log
			The git log command shows the order of the commit history for a repository.
			The command helps in understanding the state of the current branch by showing the commits that lead to 
			this state.
		Command:
			git log
		
			